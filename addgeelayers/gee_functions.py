# -*- coding: utf-8 -*-
"""
/***************************************************************************
 addgeelayers
                                 A QGIS plugin
 Add NDVI, TCT, NBR, Composites layers to QGIS using GEE
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-06
        git sha              : $Format:%H$
        copyright            : (C) 2021 by William Martinez
        email                : willimarti2008@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import ee
import os
from ee_plugin import Map
from osgeo import ogr
import pandas as pd
from qgis.PyQt.QtWidgets import QMessageBox


#======================================================
#functions
#======================================================

def saving_results(image,scale,polygon,folder,name_image):
       task_config = {
       'scale': scale,
       'region': polygon,
       'folder': folder,
       'fileFormat': 'GeoTIFF',
       'maxPixels': 10000000000000    
       }
       task = ee.batch.Export.image.toDrive(image, name_image, **task_config)
       task.start()

#This function performs a simple cloud masking using metadata
def maskL8sr(image):
    #Bits 3 and 5 are cloud shadow and cloud, respectively.
    cloudShadowBitMask = 8
    cloudsBitMask = 32
    #Get the pixel QA band.
    qa = image.select('pixel_qa')
    #Both flags should be set to zero, indicating clear conditions.
    mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0) and qa.bitwiseAnd(cloudsBitMask).eq(0)
    return image.updateMask(mask)
   

def cloudMaskL457(image):
  qa = image.select('pixel_qa')
  #If the cloud bit (5) is set and the cloud confidence (7) is high
  #or the cloud shadow bit is set (3), then it's a bad pixel.
  cloud = (qa.bitwiseAnd(32).eq(0) and(qa.bitwiseAnd(128)).eq(0)) or(qa.bitwiseAnd(8)).eq(0)
  #Remove edge pixels that don't occur in all bands
  mask2 = image.mask().reduce(ee.Reducer.min())
  return image.updateMask(cloud).updateMask(mask2)

def maskS2clouds(image):
    # Bits 10 and 11 are clouds and cirrus, respectively.
    cloudBitMask = 1024
    cirrusBitMask = 2048
    #Get the pixel QA band.
    qa = image.select('QA60')
    #Both flags should be set to zero, indicating clear conditions.
    mask = qa.bitwiseAnd(cloudBitMask).eq(0) and qa.bitwiseAnd(cirrusBitMask).eq(0)
    return image.updateMask(mask)


def normalization_img(self,img, bands_s, polygon, min_comp, max_comp,gamma):
    subset = img.select(bands_s)
    try:
       #percentiles = subset.reduceRegion(reducer = ee.Reducer.percentile([0, 75], ['min', 'max']),
       #       geometry = polygon,
       #       scale = 30,
       #       maxPixels = 1e9).getInfo()
       #getting limits
       #minVal = [val for key, val in percentiles.items() if 'min' in key]
       #maxVal = [val for key, val in percentiles.items() if 'max' in key]

       #specif_color = {
       #'bands': bands_s,
       #'min': list(reversed(minVal)),
       #'max': list(reversed(maxVal)),
       #'gamma': 1
       #}

       specif_color = {
       'bands': bands_s,
       'min': min_comp, 
       'max': max_comp,
       'gamma': gamma
       }

       return specif_color
    except ee.ee_exception.EEException:
       QMessageBox.information(self.dlg,"Message","User memory limit exceeded.")

    
def normalization_tct(componentsImage,polygon):
       componentsImage_1 = componentsImage.select(['brightness','greenness','wetness'])
       try:
              percentiles = componentsImage_1.reduceRegion(reducer = ee.Reducer.percentile([1, 99], ['min', 'max']),
                            geometry = polygon,
                            scale = 30,
                            maxPixels = 1e9).getInfo()

              minVal = [val for key, val in percentiles.items() if 'min' in key]
              maxVal = [val for key, val in percentiles.items() if 'max' in key]

              specif_color = {
              'bands': ['brightness','greenness','wetness'],
              'min': list(minVal), 
              'max': list(maxVal),
              }
              return specif_color
       except ee.ee_exception.EEException:
              QMessageBox.information(self.dlg,"Message","User memory limit exceeded.")


#NDVI
def addndvi_57(image):
  return image.addBands(image.normalizedDifference(['B4', 'B3']))\
        .addBands(image.metadata('system:time_start'))

def addndvi_8(image):
  return image.addBands(image.normalizedDifference(['B5', 'B4']))\
        .addBands(image.metadata('system:time_start'))

def addndvi_s2(image):
  return image.addBands(image.normalizedDifference(['B8', 'B4']))\
        .addBands(image.metadata('system:time_start'))


def map_gee_layers(self,list_extent,start_date,end_date,computation,state_ndvi,state_nbr,state_tct,list_bands_composition,sensor, min_comp, max_comp, gamma,sdata_d):

       #======================================================
       #TCT Coefficients
       #======================================================
       #https://www.researchgate.net/figure/Coefficients-of-the-transformation-of-Sentinel-2-MSI-image-to-tasselled-cap_tbl1_329117906
       #https://www.chegg.com/homework-help/questions-and-answers/given-6-band-tasselled-cap-coefficients-sentinel-2-msi--blue-green-red-nr-1-brightness-035-q48524806
       coefficients_S2 = ee.Array([
              [0.3510, 0.3813, 0.3437, 0.7196, 0.2396, 0.1949],
              [-0.3599, -0.3533, -0.4734, 0.6633, 0.0087, -0.2856],
              [0.2578, 0.2305, 0.0883, 0.1071, -0.7611, -0.5309]
              ])
       #https://developers.google.com/earth-engine/guides/arrays_array_images
       coefficients_L8 = ee.Array([
              [0.3029, 0.2786, 0.4733, 0.5599, 0.508, 0.1872],
              [-0.2941, -0.2435, -0.5424, 0.7276, 0.0713, -0.1608],
              [0.1511, 0.1973, 0.3283, 0.3407, -0.7117, -0.4559]
              ])
       #https://www.researchgate.net/figure/Tasseled-cap-coefficients-for-Landsat-7-ETM-at-satellite-reflectance_tbl1_237614492       
       coefficients_L7 = ee.Array([
              [0.3561, 0.3972, 0.3904, 0.6966, 0.2286, 0.1596],
              [-0.3344, -0.3544, -0.4556, 0.6966, -0.0242, -0.2630],
              [0.2626, 0.2141, 0.0926, 0.0656, -0.7629, -0.5388]
              ])
       coefficients_L5 = ee.Array([
              [0.3037, 0.2793, 0.4743, 0.5585, 0.5082, 0.1863],
              [-0.2848, -0.2435, -0.5436, 0.7243, 0.0840, -0.1800],
              [0.1509, 0.1973, 0.3279, 0.3406, -0.7112, -0.4572]
       ])
       #Create an ee.Geometry.
       polygon = ee.Geometry.Polygon([list_extent])
       #imagery
       if sensor == "L5":
              id_imagery = 'LANDSAT/LT05/C01/T1_SR'
              scale = 30
       elif sensor == "L7":
              id_imagery = 'LANDSAT/LE07/C01/T1_SR'
              scale = 30
       elif sensor == "L8":
              id_imagery = 'LANDSAT/LC08/C01/T1_SR'
              scale = 30
              #LANDSAT/LC08/C02/T1_L2
       elif sensor == "S2":
              id_imagery = 'COPERNICUS/S2_SR'
              scale = 10

       #This function clips the image according with a polygon
       def clipToCol(image):
              return image.clip(polygon)

       #handinling exception about possible big request of user
       try:
              dataset = ee.ImageCollection(id_imagery)\
                     .filterDate(str(start_date.toString("yyyy-MM-dd")),str(end_date.toString("yyyy-MM-dd")))\
                     .filterBounds(polygon)\
                     .map(clipToCol)
       except ee.ee_exception.EEException:
              QMessageBox.information(self.dlg,"Message","User memory limit exceeded.")
              self.dlg.close()

       if dataset.size().getInfo() == 0:
              QMessageBox.information(self.dlg,"Message","No images are available for this period.")
       else:
              #processing       
              if sensor == "L5":
                     dataset_sa_masked = dataset.map(cloudMaskL457).map(addndvi_57)
              elif sensor == "L7":
                     dataset_sa_masked = dataset.map(cloudMaskL457).map(addndvi_57)
              elif sensor == "L8":
                     dataset_sa_masked = dataset.map(maskL8sr).map(addndvi_8)
              elif sensor == "S2":
                     dataset_sa_masked = dataset.map(maskS2clouds).map(addndvi_s2)

              #taking the most photosintetic active pixel

              if computation == "Median":
                     composite = ee.Image(dataset_sa_masked.median())
              elif computation == "Max NDVI":
                     composite = dataset_sa_masked.qualityMosaic('nd')
              elif computation == "Most recent":
                     composite = dataset_sa_masked.qualityMosaic('system:time_start')

              #======================================================
              #False color
              #======================================================
              print(list_bands_composition)
              specif_color = normalization_img(self,composite, list_bands_composition,polygon,min_comp, max_comp, gamma)
              Map.addLayer(composite,specif_color, 'Composite')

              #save results of composite
              if sdata_d['sdata'] == True:
                     saving_results(composite.select(list_bands_composition).toUint16(),scale,polygon,sdata_d['folder'],'Composite')

              #======================================================
              #NDVI
              #======================================================
              if state_ndvi == 2:
                     color_specif = {
                     'min':-1, 
                     'max':1, 
                     'palette': ["red", "orange", "yellow", "green"]}
                     Map.addLayer(composite.select('nd'),color_specif, 'NDVI')
                     #save results of NDVI
                     if sdata_d['sdata'] == True:
                            saving_results(composite.select('nd'),scale,polygon,sdata_d['folder'],'NDVI')

              #======================================================
              #NBR
              #======================================================
              #https://www.usgs.gov/landsat-missions/landsat-normalized-burn-ratio
              if state_nbr == 2:
                            if sensor == "S2":
                                    nbr = ee.Image(composite.expression(
                                    '(NIR-SWIR)/(NIR+SWIR)', {
                                    'NIR' : composite.select('B8A'),
                                    'SWIR' : composite.select('B12')
                                    })).rename('NBR').multiply(1000).toInt16()
                            elif sensor == "L5":
                                    nbr = ee.Image(composite.expression(
                                    '(NIR-SWIR)/(NIR+SWIR)', {
                                    'NIR' : composite.select('B4'),
                                    'SWIR' : composite.select('B7')
                                    })).rename('NBR').multiply(1000).toInt16()
                            elif sensor == "L7":
                                    nbr = ee.Image(composite.expression(
                                    '(NIR-SWIR)/(NIR+SWIR)', {
                                    'NIR' : composite.select('B4'),
                                    'SWIR' : composite.select('B7')
                                    })).rename('NBR').multiply(1000).toInt16()
                            elif sensor == "L8":
                                    nbr = ee.Image(composite.expression(
                                    '(NIR-SWIR)/(NIR+SWIR)', {
                                    'NIR' : composite.select('B5'),
                                    'SWIR' : composite.select('B7')
                                    })).rename('NBR').multiply(1000).toInt16()
                            #printing
                            color_specif_NBR = {
                            'min':-1000,
                            'max':1000, 
                            'palette': ['red', 'white', 'green']}
                            Map.addLayer(nbr,color_specif_NBR, 'NBR')

                            #save results of NBR
                            if sdata_d['sdata'] == True:
                                   saving_results(nbr,scale,polygon,sdata_d['folder'],'NBR')
              #======================================================
              #TCT
              #======================================================
              if state_tct == 2:
                            if sensor == "S2":
                                   bands = ["B2","B3","B4","B8","B11","B12"]
                                   subset = composite.select(bands)
                                   coefficients = coefficients_S2
                            elif sensor == "L5":
                                   bands = ['B1','B2','B3', 'B4', 'B5','B7']
                                   subset = composite.select(bands)
                                   coefficients = coefficients_L5
                            elif sensor == "L7":
                                   bands = ['B1','B2','B3', 'B4', 'B5','B7']
                                   subset = composite.select(bands)
                                   coefficients = coefficients_L7
                            elif sensor == "L8":
                                   bands = ['B2','B3','B4', 'B5', 'B6','B7']
                                   subset = composite.select(bands)
                                   coefficients = coefficients_L8

                            #Make an Array Image, with a 1-D Array per pixel.
                            arrayImage1D = subset.toArray()

                            #Make an Array Image with a 2-D Array per pixel, 6x1.
                            arrayImage2D = arrayImage1D.toArray(1)

                            #Do a matrix multiplication: 6x6 times 6x1.
                            componentsImage = ee.Image(coefficients)\
                            .matrixMultiply(arrayImage2D)\
                            .arrayProject([0])\
                            .arrayFlatten([['brightness', 'greenness', 'wetness']])

                            specif_color_tct = normalization_tct(componentsImage,polygon)
                            Map.addLayer(componentsImage,specif_color_tct, 'TCT')

                            #save results of TCT
                            if sdata_d['sdata'] == True:
                                   saving_results(componentsImage.toInt16(),scale,polygon,sdata_d['folder'],'TCT')
